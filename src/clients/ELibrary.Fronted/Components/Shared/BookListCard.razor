@inject  NavigationManager Navigation

<MDataIterator Items="Responses"
                ItemsPerPage="_itemsPerPage"
                Page="_page"
                ItemValues="_keys"
                HideDefaultFooter>
    <HeaderContent>
        <MToolbar Class="mb-2"
                  Color="transparent"
                  Dark
                  Flat
                  Elevation="0">
        </MToolbar>
    </HeaderContent>
    <ChildContent Context="props">
        <MRow>
            @foreach (var item in props.Items)
            {
                <MCol @key="item.Title" Cols="12" Sm="6" Md="4" Lg="3">
                    <MCard MinWidth="250">
                        <MCardTitle Class="subheading font-weight-bold">@item.Title</MCardTitle>
                        <MDivider></MDivider>
                        <MCardText>
                            <MList Dense>
                                <MListItem>
                                    <MListItemContent>Description</MListItemContent>
                                    <MListItemContent Class="@("align-end")">@item.Description</MListItemContent>
                                </MListItem>
                            </MList>
                        </MCardText>
                        <MCardActions>
                                <MButton Text Color="teal accent-4" OnClick="@(() => Navigation.NavigateTo($"/detail/{item.Title}&Id={item.Id}"))">More Detail</MButton>
                        </MCardActions>
                    </MCard>
                </MCol>
            }
        </MRow>
    </ChildContent>
    <FooterContent>
        <MRow Class="mt-2"
              Align="@("center")"
              Justify="@("center")">
            <span class="grey--text">Items per page</span>
            <MMenu OffsetY>
                <ActivatorContent>
                    <MButton Dark
                             Text
                             Color="primary"
                             Class="ml-2"
                             @attributes="@context.Attrs">
                         @_itemsPerPage
                        <MIcon>mdi-chevron-down</MIcon>
                    </MButton>
                </ActivatorContent>
                <ChildContent>
                    <MList>
                        @for (var i = 0; i < _itemsPerPageArray.Count; i++)
                        {
                            var index = i;
                            var number = _itemsPerPageArray[i];
                            <MListItem @key="index"
                                       OnClick="() => _itemsPerPage = number">
                                <MListItemTitle>@number</MListItemTitle>
                            </MListItem>
                        }
                    </MList>
                </ChildContent>
            </MMenu>
            <MSpacer></MSpacer>
            <span class="mr-4 grey--text">
                Page @_page of @_numberOfPages
            </span>
            <MButton Fab
                     Dark
                     Color="blue darken-3"
                     Class="mr-1"
                     OnClick="FormerPage">
                 <MIcon>mdi-chevron-left</MIcon>
             </MButton>
             <MButton Fab
                      Dark
                      Color="blue darken-3"
                      Class="ml-1"
                      OnClick="NextPage">
                 <MIcon>mdi-chevron-right</MIcon>
             </MButton>
         </MRow>
     </FooterContent>
 </MDataIterator>
 @code {
    #nullable disable
    public class BookModel
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string Id { get; set; }
    }

    [CascadingParameter]
    public List<BookModel> Responses { get; set; }

    private List<int> _itemsPerPageArray = new List<int> { 4, 8, 12 };
    private List<ItemValue<BookModel>> _keys => new List<ItemValue<BookModel>> { "Title", "Description" };
    private int _itemsPerPage = 4;
    private int _page = 1;
    private int _numberOfPages => Convert.ToInt32(Math.Ceiling(Responses.Count / (_itemsPerPage * 1.0)));

    public void NextPage()
    {
        if (_page + 1 <= _numberOfPages)
            _page += 1;
    }

    public void FormerPage()
    {
        if (_page - 1 >= 1)
            _page -= 1;
    }
}